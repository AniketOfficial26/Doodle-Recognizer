# -*- coding: utf-8 -*-
"""Aniket Gave and Chatgpt improved.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rCwM-B45O-4bIo-4mavXVMQm6xkijjlR
"""

# Install required packages
!pip install tensorflow opencv-python matplotlib

# === IMPORTS ===
import tensorflow as tf
import numpy as np
import random
import os
import matplotlib.pyplot as plt
import cv2
from sklearn.model_selection import train_test_split
from sklearn.utils import shuffle

# === SETUP ===
np.random.seed(42)
tf.random.set_seed(42)
random.seed(42)

classes = ['apple', 'airplane', 'cat', 'car', 'dog', 'flower', 'star', 'tree', 'umbrella', 'fish']
!mkdir -p quickdraw_dataset

# === DOWNLOAD DATA ===
for cls in classes:
    url = f"https://storage.googleapis.com/quickdraw_dataset/full/numpy_bitmap/{cls}.npy"
    !wget -q {url} -P quickdraw_dataset

# === LOAD DATA ===
X, y = [], []
for idx, name in enumerate(classes):
    data = np.load(f"quickdraw_dataset/{name}.npy")[:5000]  # 5000 samples per class
    data = data.astype('float32') / 255.0
    data = data.reshape(-1, 28, 28)
    X.append(data)
    y.append(np.full((data.shape[0],), idx))

X = np.concatenate(X, axis=0)
y = np.concatenate(y, axis=0)
X, y = shuffle(X, y, random_state=42)

print(f"Dataset Shape: {X.shape}, Labels: {y.shape}")

# === STROKE DILATION FUNCTION ===
def dilate_strokes(image_array):
    image_uint8 = (image_array * 255).astype(np.uint8)
    kernel = np.ones((2, 2), np.uint8)
    dilated = cv2.dilate(image_uint8, kernel, iterations=1)
    return dilated.astype('float32') / 255.0

# === APPLY DILATION ===
X_dilated = np.array([dilate_strokes(img) for img in X])
X_dilated = X_dilated.reshape(-1, 28, 28, 1)
print(f"Dilated Dataset Shape: {X_dilated.shape}")

# === TRAIN TEST SPLIT ===
X_train, X_test, y_train, y_test = train_test_split(X_dilated, y, test_size=0.2, stratify=y)
print(f"Train: {X_train.shape}, Test: {X_test.shape}")

# === BUILD MODEL ===
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization

inputs = Input(shape=(28, 28, 1))

x = Conv2D(32, (3, 3), activation='relu', padding='same')(inputs)
x = BatchNormalization()(x)
x = MaxPooling2D(2, 2)(x)
x = Dropout(0.2)(x)

x = Conv2D(64, (3, 3), activation='relu', padding='same')(x)
x = BatchNormalization()(x)
x = MaxPooling2D(2, 2)(x)
x = Dropout(0.3)(x)

x = Flatten()(x)
x = Dense(128, activation='relu')(x)
x = Dropout(0.4)(x)

outputs = Dense(10, activation='softmax')(x)

model = Model(inputs=inputs, outputs=outputs)

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

# === TRAIN MODEL ===
callbacks = [
    tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=6, restore_best_weights=True),
    tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=3)
]

history = model.fit(X_train, y_train,
                    batch_size=128,
                    epochs=40,
                    validation_data=(X_test, y_test),
                    callbacks=callbacks)

# === EVALUATE MODEL ===
test_loss, test_acc = model.evaluate(X_test, y_test)
print(f"\nTest Accuracy: {test_acc:.4f}, Loss: {test_loss:.4f}")

# === SAVE MODEL ===
model.save("doodle_recognizer_simple.keras")
print("Model saved as 'doodle_recognizer_simple.keras'")

# === PLOT ACCURACY & LOSS ===
plt.plot(history.history['accuracy'], label='Train Acc')
plt.plot(history.history['val_accuracy'], label='Val Acc')
plt.title("Accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()
plt.grid(True)
plt.show()

plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.title("Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()
plt.grid(True)
plt.show()

# === TEST ON RANDOM IMAGE ===
idx = random.randint(0, len(X_test) - 1)
image = X_test[idx]
true_label = y_test[idx]
pred = model.predict(image.reshape(1, 28, 28, 1))
pred_label = np.argmax(pred)

plt.imshow(image.squeeze(), cmap='gray')
plt.title(f"True: {classes[true_label]}, Predicted: {classes[pred_label]}")
plt.axis('off')
plt.show()

from google.colab import files
files.download("doodle_recognizer_simple.keras")

# === TEST ON 10 RANDOM IMAGES ===
plt.figure(figsize=(12, 6))
for i in range(10):
    idx = random.randint(0, len(X_test) - 1)
    image = X_test[idx]
    true_label = y_test[idx]
    pred = model.predict(image.reshape(1, 28, 28, 1))
    pred_label = np.argmax(pred)

    plt.subplot(2, 5, i + 1)
    plt.imshow(image.squeeze(), cmap='gray')
    plt.title(f"T: {classes[true_label]}\nP: {classes[pred_label]}")
    plt.axis('off')

plt.tight_layout()
plt.show()